/*
 * GccApplication2.cpp
 *
 * Created: 4/6/2016 9:03:55 AM
 *  Author: timfo734
 */ 

//Sätt till rätt hastighet
#ifndef F_CPU
#define F_CPU 16000000UL
#endif

// Definiera BAUD
#define BAUD 115200UL

// Sätt Baudratevärde för UBRR
//#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)
#define BAUDRATE 8

#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <util/setbaud.h> //Ger warning Baud rate... allowed
#include <string.h>

//Definera höger/vänster sida fram och bakutgångar
#define RightForward PORTB &= ~(1<<1);
#define RightBackward PORTB |= (1<<1);
#define LeftForward PORTB |= (1<<2);
#define LeftBackward PORTB &= ~(1<<2);

//UART
const int uart_buffer_max = 20; //Storlek på buffer
unsigned char uart_buffer[uart_buffer_max]; //Buffer där senast mottagna datan ligger
unsigned char uart_ctr = 0; // håller reda på var i buffern vi är
volatile bool uart_rx_flag; //true om vi fått ett nytt värde i buffern

//volatile uint8_t mode = 0;

// Funktion för att initiera UART
void uart_init()
{
	// Skifta registret höger 8 bitar
	UBRR0H = (BAUDRATE>>8);

	// Sätt baudrate
	UBRR0L = BAUDRATE;

	// Aktivera mottagare och sändare
	UCSR0B|= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);

	// Välj 8-bitars dataformat
	UCSR0C|= (1<<UCSZ01)|(1<<UCSZ00);
}


// Funktion för att skicka data
void uart_sendChar(unsigned char data)
{
	// Vänta tills registret är ledigt
	while (!( UCSR0A & (1<<UDRE0)));

	// Ladda in data i registret
	UDR0 = data;
}

// Funktion för att skicka data
void uart_sendNum(int data)
{
	// Vänta tills registret är ledigt
	while (!( UCSR0A & (1<<UDRE0)));

	// Ladda in data i registret
	UDR0 = data;
}

void uart_sendString(const char *string, int delay)
{
	while(*string)
	{
		uart_sendChar(*string++);
		while(delay > 0)
		{
			_delay_ms(1);
			delay--;
		}
	}
}

// Funktion för att ta emot data
unsigned char uart_readChar()
{
	// Vänta tills data har mottagits
	while(!(UCSR0A) & (1<<RXC0));
	
	// Returnera 8 bitar data
	return UDR0;
}

char uart_process(uint8_t& duty_cycle)
{
	char temp = uart_buffer[uart_ctr - 1];
	uart_ctr = 0;
	/*	switch(temp) //Om kommandot vi fick in va...
		{
			// '!' nollstället buffer-räknaren, kan va bra om man inte längre bryr sig om det gamla i buffern
			case '!': uart_ctr = 0;
			break;
			
			case 'S':
		//	mode = 'S';
			uart_ctr = 0;
			break;
			
			case 'U':
		//	mode = 'U';
			uart_ctr = 0;
			break;
			
			case 'D':
		//	mode = 'D';
			uart_ctr = 0;
			break;
			
			case 'L':
		//	mode = 'L';
			uart_ctr = 0;
			break;
			
			case 'R':
		//	mode = 'R';
			uart_ctr = 0;
			break;
		}*/
	return temp;
}



//Initiering 
void pwm_init()
{
	// init TCCR0A reg, se sid 103
	TCCR0A |=(1<<COM0A0) |(1<<COM0A1) | (1<<COM0B0) |(1<<COM0B1) | (1<<WGM00);
	TCCR0A &= ~(1<<WGM01);
		
	// init TCCR0B reg,
	TCCR0B |= (1<<CS21) | (1<<CS20);
	TCCR0B &= ~(1<<WGM20) | ~(1<<CS22);
	
	// OC0A till output
	DDRB |= (1<<1) | (1<<2) | (1<<3) | (1<<4); 
	// Output compare interrupt, se sida 108
	TIMSK0 |= (1<<OCIE0A) | (1<<OCIE0B);
	
	//Stå stilla som startläge
	OCR0A = 0xFF;
	OCR0B = 0xFF;
	
	// Sätter riktning till framåt
	PORTB &= ~(1<<1);
	PORTB |= (1<<2);
}

//Kör vänster sida
//Inargument duty (hastighet)
void SetPWMOutput_right(uint8_t duty)
{
	OCR0A=duty;
}

//Kör höger sida
//Inargument duty (hastighet)
void SetPWMOutput_left(uint8_t duty)
{
	OCR0B=duty;
}

void delay(int time) 
{
	while(time > 0)
	{
		_delay_ms(1);
		time--;
	}
}

void stop()
{
	OCR0A = 0xFF;
	OCR0B = 0xFF;
}
//Rotera höger
//Inargument: duty (hastighet)
void rotate_right(uint8_t duty)
{
	RightBackward;
	LeftForward;
	SetPWMOutput_left(duty);
	SetPWMOutput_right(duty);
}

//Rotera vänster
//Inargument: duty (hastighet)
void rotate_left(uint8_t duty)
{
	RightForward;
	LeftBackward;
	SetPWMOutput_left(duty);
	SetPWMOutput_right(duty);
}

//Kör framåt
//Inargument: duty (hastighet)
void move_forward(uint8_t duty)
{
	RightForward;
	LeftForward;
	SetPWMOutput_left(duty);
	SetPWMOutput_right(duty);
}

//Kör bakåt
//Inargument: duty (hastighet)
void move_backwards(uint8_t duty)
{
	RightBackward;
	LeftBackward;
	SetPWMOutput_left(duty);
	SetPWMOutput_right(duty);
}

//Sväng höger
//Inargument: duty (hastighet)
void turn_left(uint8_t duty)
 {
	RightForward;
	LeftForward;
	SetPWMOutput_left(254);
	SetPWMOutput_right(duty);
 }
 
//Sväng vänster
//Inargument: duty (hastighet)
 void turn_right(uint8_t duty)
 {
	 RightForward;
	 LeftForward;
	 SetPWMOutput_left(duty);
	 SetPWMOutput_right(254);
 }

// Ändra hastighet, dvs duty_cycle
 void change_speed(uint8_t& duty, uint8_t speed)
{
	duty = speed;
}

//******************Avbrottsrutiner***********************
ISR(USART0_RX_vect)
{
	uint8_t temp;
	/*
	if(uart_ctr == uart_buffer_max) // Är bufferräknaren vid max, nollställ
	{
		uart_ctr = 0;
	}
	uart_buffer[uart_ctr++] = UDR0;	
	*/
	temp = UDR0;
	uart_rx_flag = true;
}

void cases(int mode, uint8_t duty_cycle)
{	
	if (mode == 'S' )
	{
		uart_rx_flag = false;
		stop();
	}
	else if(mode == 'U')
	{
		move_forward(duty_cycle);
	}
	else if(mode == 'D')
	{
		move_backwards(duty_cycle);
	}
	else if(mode == 'R')
	{
		turn_right(duty_cycle);
	}
	else if(mode == 'L')
	{
		turn_left(duty_cycle);
	}
}

int main(void)
{
	uart_rx_flag = false;
	uint8_t duty_cycle = 140;
	//uint8_t new_mode = 'S';
	uint8_t mode = 'U';
	pwm_init();
	uart_init();
	sei();
	
	
	while(1)
	{
		
		if(uart_rx_flag)// Om vi mottagit data via uart
		{
			//uint8_t new_mode = uart_process(duty_cycle);
			if (mode == 'U')
			{		
				uart_sendChar('S');
				uart_rx_flag = false;
				mode = 'S';
				cases(mode, duty_cycle);
			}
			else if (mode == 'S')
			{
				uart_sendChar('U');
				uart_rx_flag = false;
				mode = 'U';
				//cases(mode, duty_cycle);
			}			
		}
	_delay_ms(1);
	/*
		if(mode != new_mode)
		{
			mode = new_mode;	
			cases(mode, duty_cycle);
		}
		*/
	
		/*
		//Testdel för alla rörelser
		turn_right(duty_cycle);
		Wait();
		turn_left(duty_cycle);
		Wait();
		move_forward(duty_cycle);
		Wait();
		move_backwards(duty_cycle);
		Wait();
		rotate_left(duty_cycle);
		Wait();
		rotate_right(duty_cycle);
		Wait();*/
	}
}
